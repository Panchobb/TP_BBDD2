-- agregar nuevo usuario
CREATE OR ALTER PROCEDURE sp_InsertarUsuario
    @IDPersona INT,
    @NombreUsuario NVARCHAR(50),
    @Contrasenia NVARCHAR(255),
    @Rol NVARCHAR(50)
AS
BEGIN
    BEGIN TRY
        -- Verificar si la persona existe
        IF NOT EXISTS (SELECT 1 FROM Persona WHERE IDPersona = @IDPersona AND Activo = 1)
        BEGIN
            RAISERROR('La persona especificada no existe o no está activa.', 16, 1);
            RETURN -1;
        END
        
        -- Verificar si el IDPersona ya tiene usuario
        IF EXISTS (SELECT 1 FROM Usuario WHERE IDPersona = @IDPersona)
        BEGIN
            RAISERROR('Esta persona ya tiene un usuario asociado.', 16, 1);
            RETURN -2;
        END
        
        -- Verificar si el nombre de usuario ya existe
        IF EXISTS (SELECT 1 FROM Usuario WHERE NombreUsuario = @NombreUsuario)
        BEGIN
            RAISERROR('El nombre de usuario ya está en uso.', 16, 1);
            RETURN -3;
        END
        
        -- Validar rol permitido
        IF @Rol NOT IN ('Administrador', 'Profesor', 'Participante', 'Recepcionista')
        BEGIN
            RAISERROR('El rol especificado no es válido.', 16, 1);
            RETURN -4;
        END
        
        -- Insertar el nuevo usuario
        INSERT INTO Usuario (IDPersona, NombreUsuario, Contraseña, Rol, Activo, FechaCreacion, FechaModificacion)
        VALUES (@IDPersona, @NombreUsuario, @Contrasenia, @Rol, 1, GETDATE(), GETDATE());
        
        RETURN 0; -- Éxito
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR('Error al crear usuario: %s', 16, 1, @ErrorMessage);
        RETURN -99; -- Error general
    END CATCH
END;

        
--inscribe un participante 
CREATE PROCEDURE sp_InscribirParticipante
    @IDParticipante INT,
    @IDCurso INT
AS
BEGIN
    BEGIN TRY
    
        IF NOT EXISTS (
            SELECT 1 FROM Participante P
            INNER JOIN Persona Pe ON P.IDPersona = Pe.IDPersona
            WHERE P.IDParticipante = @IDParticipante
            AND P.Activo = 1 AND Pe.Activo = 1
        )
        BEGIN
            RAISERROR('El participante no existe o no está activo.', 16, 1);
            RETURN -1;
        END
        
        
        IF NOT EXISTS (
            SELECT 1 FROM Cursos 
            WHERE IDCurso = @IDCurso 
            AND Activo = 1 
            AND Estado = 'Activo'
            AND FechaInicio > GETDATE() -- No permitir inscripción a cursos ya iniciados
        )
        BEGIN
            RAISERROR('El curso no está disponible para inscripción.', 16, 1);
            RETURN -2;
        END
        
     
        DECLARE @CupoDisponible INT;
        SELECT @CupoDisponible = C.CupoMaximo - COUNT(I.IDInscripcion)
        FROM Cursos C
        LEFT JOIN Inscripcion I ON C.IDCurso = I.IDCurso AND I.Activo = 1
        WHERE C.IDCurso = @IDCurso
        GROUP BY C.CupoMaximo;
        
        IF @CupoDisponible <= 0
        BEGIN
            RAISERROR('El curso ha alcanzado su cupo máximo.', 16, 1);
            RETURN -3;
        END
        
        
        IF EXISTS (
            SELECT 1 FROM Inscripcion
            WHERE IDParticipante = @IDParticipante AND IDCurso = @IDCurso
        )
        BEGIN
            -- Si existe pero está inactiva, reactivar en lugar de crear nueva
            UPDATE Inscripcion 
            SET Activo = 1, 
                FechaModificacion = GETDATE()
            WHERE IDParticipante = @IDParticipante 
              AND IDCurso = @IDCurso;
            
            RETURN 1;
        END
        ELSE
        BEGIN
           
            INSERT INTO Inscripcion (IDParticipante, IDCurso, FechaInscripcion, Activo)
            VALUES (@IDParticipante, @IDCurso, GETDATE(), 1);
            
            RETURN 0; 
        END
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR('Error en inscripción: %s', 16, 1, @ErrorMessage);
        RETURN -99; -- Error general
    END CATCH
END;
CREATE OR ALTER PROCEDURE sp_ParticipantesMencion
    @MinimoAcciones INT = 3,
    @SoloConMenciones BIT = 0
AS
BEGIN
    BEGIN TRY
        SELECT
            Pa.IDParticipante,
            Pe.Nombre + ' ' + Pe.Apellido AS Participante,
            Pe.Email,
            COUNT(DISTINCT A.IDAccion) AS TotalAccionesSolidarias,
            COUNT(DISTINCT CASE WHEN A.Fecha >= DATEADD(MONTH, -6, GETDATE()) 
                          THEN A.IDAccion END) AS AccionesUltimos6Meses,
            -- Solución compatible con todas las versiones de SQL Server
            STUFF((
                SELECT ', ' + ME2.TipoMencion
                FROM MencionEspecial ME2
                WHERE ME2.IDParticipante = Pa.IDParticipante 
                AND ME2.Activo = 1
                ORDER BY ME2.TipoMencion  -- ORDER BY permitido aquí por el FOR XML
                FOR XML PATH('')
            ), 1, 2, '') AS MencionesRecibidas,
            COUNT(DISTINCT ME.IDMencion) AS TotalMenciones,
            (SELECT COUNT(*) FROM Inscripcion I 
             JOIN Cursos C ON I.IDCurso = C.IDCurso
             WHERE I.IDParticipante = Pa.IDParticipante 
             AND I.Activo = 1 
             AND C.Activo = 1) AS CursosActivos,
            (SELECT COUNT(*) FROM Asistencia A 
             JOIN Inscripcion I ON A.IDInscripcion = I.IDInscripcion
             WHERE I.IDParticipante = Pa.IDParticipante 
             AND A.Presente = 1) AS TotalAsistencias
        FROM Participante Pa
        INNER JOIN Persona Pe ON Pa.IDPersona = Pe.IDPersona AND Pe.Activo = 1
        LEFT JOIN AccionSolidaria A ON A.IDParticipante = Pa.IDParticipante AND A.Activo = 1
        LEFT JOIN MencionEspecial ME ON ME.IDParticipante = Pa.IDParticipante AND ME.Activo = 1
        WHERE Pa.Activo = 1
          AND (
              SELECT COUNT(*) 
              FROM AccionSolidaria A2
              WHERE A2.IDParticipante = Pa.IDParticipante
              AND A2.Activo = 1
          ) >= @MinimoAcciones
          AND NOT EXISTS (
              SELECT 1 
              FROM Inscripcion I
              JOIN Asistencia Asis ON Asis.IDInscripcion = I.IDInscripcion
              WHERE I.IDParticipante = Pa.IDParticipante
              AND Asis.Presente = 0
              AND Asis.Fecha >= DATEADD(MONTH, -12, GETDATE())
          )
          AND (@SoloConMenciones = 0 OR ME.IDMencion IS NOT NULL)
        GROUP BY Pa.IDParticipante, Pe.Nombre, Pe.Apellido, Pe.Email
        ORDER BY TotalAccionesSolidarias DESC, TotalMenciones DESC;
        
        RETURN 0;
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR('Error al generar reporte: %s', 16, 1, @ErrorMessage);
        RETURN -1;
    END CATCH
END;
