-- agregar nuevo usuario
CREATE PROCEDURE sp_InsertarUsuario
    @IDPersona INT,
    @NombreUsuario NVARCHAR(50),
    @Contrasenia NVARCHAR(255),
    @Rol NVARCHAR(50)
AS
BEGIN
    BEGIN TRY
       
        IF EXISTS (SELECT 1 FROM Usuario WHERE IDPersona = @IDPersona)
        BEGIN
            RAISERROR('Esta persona ya tiene un usuario asociado.', 16, 1);
            RETURN;
        END
        
       
        IF EXISTS (SELECT 1 FROM Usuario WHERE NombreUsuario = @NombreUsuario)
        BEGIN
            RAISERROR('El nombre de usuario ya está en uso.', 16, 1);
            RETURN;
        END
        
      
        INSERT INTO Usuario (IDPersona, NombreUsuario, Contraseña, Rol)
        VALUES (@IDPersona, @NombreUsuario, @Contrasenia, @Rol);
        
        RETURN 0; -- Éxito
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
        RETURN -1; -- Error
    END CATCH
END;
--inscribe un participante 
CREATE PROCEDURE sp_InscribirParticipante
    @IDParticipante INT,
    @IDCurso INT
AS
BEGIN
    BEGIN TRY
        -- Verificar si el participante está activo
        IF NOT EXISTS (
            SELECT 1 FROM Participante P
            INNER JOIN Persona Pe ON P.IDPersona = Pe.IDPersona
            WHERE P.IDParticipante = @IDParticipante
            AND P.Activo = 1 AND Pe.Activo = 1
        )
        BEGIN
            RAISERROR('El participante no existe o no está activo.', 16, 1);
            RETURN;
        END
        
        -- Verificar si el curso está activo
        IF NOT EXISTS (SELECT 1 FROM Cursos WHERE IDCurso = @IDCurso AND Activo = 1)
        BEGIN
            RAISERROR('El curso no existe o no está activo.', 16, 1);
            RETURN;
        END
        
        -- Verificar cupo disponible
        DECLARE @CupoMaximo INT, @Inscritos INT;
        SELECT @CupoMaximo = CupoMaximo FROM Cursos WHERE IDCurso = @IDCurso;
        SELECT @Inscritos = COUNT(*) FROM Inscripcion WHERE IDCurso = @IDCurso AND Activo = 1;
        
        IF @Inscritos >= @CupoMaximo
        BEGIN
            RAISERROR('El curso ha alcanzado su cupo máximo.', 16, 1);
            RETURN;
        END
        
        -- Verificar inscripción duplicada
        IF EXISTS (
            SELECT 1 FROM Inscripcion
            WHERE IDParticipante = @IDParticipante AND IDCurso = @IDCurso
        )
        BEGIN
            RAISERROR('El participante ya está inscripto en ese curso.', 16, 1);
            RETURN;
        END

        -- Realizar la inscripción
        INSERT INTO Inscripcion (IDParticipante, IDCurso)
        VALUES (@IDParticipante, @IDCurso);
        
        RETURN 0; -- Éxito
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
        RETURN -1; -- Error
    END CATCH
END;

--Mencio Especial
CREATE PROCEDURE sp_ParticipantesMencion
AS
BEGIN
    SELECT
        Pe.Nombre + ' ' + Pe.Apellido AS Participante,
        COUNT(A.IDAccion) AS AccionesSolidarias,
        STRING_AGG(ME.TipoMencion, ', ') AS MencionesRecibidas
    FROM Participante Pa
    INNER JOIN Persona Pe ON Pa.IDPersona = Pe.IDPersona
    LEFT JOIN AccionSolidaria A ON A.IDParticipante = Pa.IDParticipante AND A.Activo = 1
    LEFT JOIN MencionEspecial ME ON ME.IDParticipante = Pa.IDParticipante AND ME.Activo = 1
    WHERE
        (
            SELECT COUNT(*) FROM AccionSolidaria A2
            WHERE A2.IDParticipante = Pa.IDParticipante
            AND A2.Activo = 1
        ) >= 3
        AND NOT EXISTS (
            SELECT 1 FROM Inscripcion I
            INNER JOIN Asistencia Asis ON Asis.IDInscripcion = I.IDInscripcion
            WHERE I.IDParticipante = Pa.IDParticipante
            AND Asis.Presente = 0
        )
    GROUP BY Pe.Nombre, Pe.Apellido, Pa.IDParticipante;
END;

